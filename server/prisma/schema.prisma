// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  COMPANY
  ADVISOR
  ADMIN
}

model User {
  id              String             @id @default(uuid())
  name            String
  userName        String
  email           String             @unique
  location        String?
  bio             String?
  dateOfBirth     String?
  password        String?
  pdp             String
  number          Int?
  cover           String
  socials         String[]
  active          Boolean            @default(false)
  premuim         Boolean            @default(false)
  forgotPassword  String?
  role            Role
  project         Project[]
  posts           Post[]
  project_comment Project_comments[]
  Post_comments   Post_comments[]
  service         Service[]
  report          Report[]
  notification    Notifications[]
  favList         FavList[]
  Basket          Basket[]
  Forum_Posts     Forum_Posts[]
  FPost_comments  FPost_comments[]
  replies         Replies[]
  likes           Likes[]
  userTechnology  userTechnology[]
  Specialty       Specialty?         @relation(fields: [specialtyId], references: [id])
  specialtyId     String?
}

model Project {
  id                String              @id @default(uuid())
  title             String
  description       String              @db.Text
  content           String[]            @db.Text
  images            String[]
  created_at        DateTime            @default(now())
  likes             Likes[]
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?
  comment           Project_comments[]
  favList           FavList[]
  Technologies      Technologies[]
  projectTechnology projectTechnology[]
}

model Post {
  id         String          @id @default(uuid())
  title      String
  content    String          @db.Text
  images     String          @db.Text
  created_at DateTime        @default(now())
  User       User?           @relation(fields: [userId], references: [id])
  userId     String?
  likes      Likes[]
  comments   Post_comments[]
  favList    FavList[]
}

model Project_comments {
  id         String    @id @default(uuid())
  content    String    @db.Text
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  images     String?
  created_at DateTime  @default(now())
  Project    Project?  @relation(fields: [projectId], references: [id])
  projectId  String?
  replies    Replies[]
  likes      Likes[]
}

model Post_comments {
  id         String    @id @default(uuid())
  content    String    @db.Text
  images     String
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  created_at DateTime  @default(now())
  Post       Post?     @relation(fields: [postId], references: [id])
  postId     String?
  replies    Replies[]
  likes      Likes[]
}

model Service {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  image       String    @db.Text
  Price       Int
  created_at  DateTime  @default(now())
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  favList     FavList[]
  Basket      Basket[]
  likes       Likes[]
}

model Replies {
  id                 String            @id @default(uuid())
  content            String            @db.Text
  created_at         DateTime          @default(now())
  Post_comments      Post_comments?    @relation(fields: [post_commentsId], references: [id])
  post_commentsId    String?
  Project_comments   Project_comments? @relation(fields: [project_commentsId], references: [id])
  project_commentsId String?
  likes              Likes[]
  FPost_comments     FPost_comments?   @relation(fields: [fPost_commentsId], references: [id])
  fPost_commentsId   String?
  User               User?             @relation(fields: [userId], references: [id])
  userId             String?
}

model Report {
  id       String  @id @default(uuid())
  category String  @db.Text
  evidence String  @db.Text
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
}

model Notifications {
  id         String   @id @default(uuid())
  content    String   @db.Text
  seen       Boolean  @default(false)
  created_at DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model FavList {
  id String @id @default(uuid())

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?
}

model Basket {
  id String @id @default(uuid())

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?
}

model Forum_Posts {
  id               String           @id @default(uuid())
  title            String
  content          String           @db.Text
  images           String[]         @db.Text
  created_at       DateTime         @default(now())
  User             User?            @relation(fields: [userId], references: [id])
  userId           String?
  comments         FPost_comments[]
  likes            Likes[]
  Forum_Category   Forum_Category?  @relation(fields: [forum_CategoryId], references: [id])
  forum_CategoryId String?
}

model FPost_comments {
  id            String       @id @default(uuid())
  content       String       @db.Text
  images        String[]     @db.Text
  created_at    DateTime     @default(now())
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?
  likes         Likes[]
  Forum_Posts   Forum_Posts? @relation(fields: [forum_PostsId], references: [id])
  forum_PostsId String?
  Replies       Replies[]
}

model Technologies {
  id                String              @id @default(uuid())
  name              String
  image             String
  projectTechnology projectTechnology[]
  Project           Project?            @relation(fields: [projectId], references: [id])
  projectId         String?
  Specialty         Specialty?          @relation(fields: [specialtyId], references: [id])
  specialtyId       String?
  userTech          userTechnology[]
}

model userTechnology {
  id     String  @id @default(uuid())
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Technologies   Technologies? @relation(fields: [technologiesId], references: [id])
  technologiesId String?
}

model projectTechnology {
  id           String        @id @default(uuid())
  Project      Project?      @relation(fields: [projectId], references: [id])
  projectId    String?
  technologies Technologies? @relation(fields: [technologyId], references: [id])
  technologyId String?
}

model Likes {
  id                 String            @id @default(uuid())
  like               Int               @default(0)
  Project            Project?          @relation(fields: [projectId], references: [id])
  projectId          String?
  Post               Post?             @relation(fields: [postId], references: [id])
  postId             String?
  Project_comments   Project_comments? @relation(fields: [project_commentsId], references: [id])
  project_commentsId String?
  Post_comments      Post_comments?    @relation(fields: [post_commentsId], references: [id])
  post_commentsId    String?
  Service            Service?          @relation(fields: [serviceId], references: [id])
  serviceId          String?
  Replies            Replies?          @relation(fields: [repliesId], references: [id])
  repliesId          String?
  Forum_Posts        Forum_Posts?      @relation(fields: [forum_PostsId], references: [id])
  forum_PostsId      String?
  FPost_comments     FPost_comments?   @relation(fields: [fPost_commentsId], references: [id])
  fPost_commentsId   String?
  User               User?             @relation(fields: [userId], references: [id])
  userId             String?
}

model Specialty {
  id           String         @id @default(uuid())
  name         String
  user         User[]
  technologies Technologies[]
}

model Forum_Category {
  id          String        @id @default(uuid())
  name        String
  image       String        @db.Text
  Forum_Posts Forum_Posts[]
}
